<?php

global $feedID_description, $feedLabel_description, $feedCat_description, $feedFreq_description;
$feedLabel_description = 'A descriptive name for the feed, so that you can identify it and manage it later. [please avoid using the ampersand (&) sign]';
$feedID_description = 'The unique feed ID from PublishThis.';
$feedCat_description = 'The category to assign all articles transferred via this feed.';
$feedFreq_description = 'The number of hours between JSON synchronization calls.';

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function publish_this_help($path, $arg) {
  switch ($path) {
    case "admin/help#publish_this":
      return '<p>' . t("Parses PublishThis JSON feeds and writes it to the database.") . '</p>';
      break;
    default:
      break;
  }
} /* end function publish_this_help */



/**
 * Implements hook_menu().
 */
function publish_this_menu() {
  $items = array();
  $items['admin/config/services/publish_this'] = array(
    'title' => 'PublishThis',
    'description' => 'Configuration for PublishThis module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publish_this_globalSettings_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  /* parent menu item, defaults to existing feeds page*/
  $items['admin/structure/publish_this_feeds'] = array(
    'title' => 'PublishThis Feeds',
    'description' => 'Configuration for PublishThis module',
    'page callback' => 'system_admin_menu_block_page',
    'page arguments' => array('publish_this_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  /* page to display existing feeds */
  $items['admin/structure/publish_this_feeds/manage_edit_page'] = array(
    'title' => ' Manage/List Feeds',
    'description' => 'Manage Feeds already setup in the Drupal import queue.',
    'page callback' => 'publish_this_page',
    'page arguments' => array('1'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  /* add a new feed form */
  $items['admin/structure/publish_this_feeds/add_new_feed'] = array(
    'title' => ' Add new feed',
    'description' => 'Add new feed to the import queue in Drupal (requires that a feed be setup in PublishThis and you have its ID).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publish_this_addFeed_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  /* edit a feed form */
  $items['admin/structure/publish_this_feeds/edit_feed'] = array(
    'title' => ' Edit feed',
    'hidden' => true,
    'description' => 'Edit an existing feed in the Drupal import queue.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publish_this_editFeed_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  /* delete feed form */
  $items['admin/structure/publish_this_feeds/delete_feed'] = array(
    'title' => ' Delete feed',
    'hidden' => true,
    'description' => 'Delete an existing feed from the import queue in Drupal.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publish_this_deleteFeed_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/publish_this_feeds/curate_manage_publish_this'] = array(
    'title' => 'Curate & Manage via PublishThis',
    'description' => 'Manage feeds in PublishThis so that they can be added to the Drupal import queue.',
    'page callback' => 'publish_this_page',
    'page arguments' => array('2'),
    'access arguments' => array('access publish_this content'),
    'type' => MENU_NORMAL_ITEM,
  );


  $items['admin/structure/publish_this_feeds/manual_sync'] = array(
    'title' => 'Manual Sync',
    'description' => 'Manually sync the PublishThis feeds in the Drupal import queue.',
    'page callback' => 'publish_this_page',
    'page arguments' => array('3'),
    'access arguments' => array('access publish_this content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/publish_this_feeds/cron_sync'] = array(
    'title' => 'Cron Sync',
    'hidden' => true,
    'description' => 'Scheduled sync (cron job) of PublishThis feeds in the Drupal import queue.',
    'page callback' => 'publish_this_page',
    'page arguments' => array('4'),
    'access arguments' => array('access publish_this content'),
    'type' => MENU_NORMAL_ITEM,
  );

 /*
  $items['publish_this_feeds'] = array(
    'title' => 'PublishThis feeds',
    'page callback' => '_publish_this_feeds_page',
    'access arguments' => array('access publish_this_feeds content'),
    'type' => MENU_NORMAL_ITEM,
  );
*/
  return $items;
} /* end function publish_this_menu */







//******************** API Management Form submission *********************************//


/**
 * Page callback: PublishThis Global settings
 * @see publish_this_menu()
 * http://webapi.publishthis.com/rest/feeds/{feedId}/custom-data/?token={your api token}
 */
function publish_this_globalSettings_form($form, &$form_state) {
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('Feed settings'),
  );
  $form['general']['publish_this_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix for Automated Twitter Feed'),
    '#default_value' => variable_get('publish_this_prefix', 'http://webapi.publishthis.com/rest/content/automated/tweets/feed/'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#description' => 'PublishThis JSON feeds have urls that follow a fixed pattern. Provide the fixed absolute url substring up to the {FEED ID}.',
  );
  $form['general']['publish_this_suffix'] = array(
    '#type' => 'textfield',
    '#title' => t('Suffix for Automated Twitter Feed'),
    '#default_value' => variable_get('publish_this_suffix', '?token='),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#description' => 'PublishThis JSON feeds have urls that follow a fixed pattern. Provide the trailing substring of the fixed absolute url between the {FEED ID} and {API TOKEN}',
  );

  $form['general']['publish_this_prefix_curated'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix for Curated Feed'),
    '#default_value' => variable_get('publish_this_prefix_curated', 'http://webapi.publishthis.com/rest/content/curated/feed/'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#description' => 'PublishThis JSON feeds have urls that follow a fixed pattern. Provide the fixed absolute url substring up to the {FEED ID}.',
  );
  $form['general']['publish_this_suffix_curated'] = array(
    '#type' => 'textfield',
    '#title' => t('Suffix for Curated Feed'),
    '#default_value' => variable_get('publish_this_suffix_curated', '?token='),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#description' => 'PublishThis JSON feeds have urls that follow a fixed pattern. Provide the trailing substring of the fixed absolute url between the {FEED ID} and {API TOKEN}',
  );

  $form['general']['publish_this_prefix_automated'] = array(
    '#type' => 'textfield',
    '#title' => t('Prefix for Automated Feed'),
    '#default_value' => variable_get('publish_this_prefix_automated', 'http://webapi.publishthis.com/rest/content/automated/feed/'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#description' => 'PublishThis JSON feeds have urls that follow a fixed pattern. Provide the fixed absolute url substring up to the {FEED ID}.',
  );
  $form['general']['publish_this_suffix_automated'] = array(
    '#type' => 'textfield',
    '#title' => t('Suffix for Automated Feed'),
    '#default_value' => variable_get('publish_this_suffix_automated', '?token='),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#description' => 'PublishThis JSON feeds have urls that follow a fixed pattern. Provide the trailing substring of the fixed absolute url between the {FEED ID} and {API TOKEN}',
  );


  $form['general']['publish_this_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Token/Key for your Domain'),
    '#default_value' => variable_get('publish_this_api_key', 'api key'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#description' => 'Provide your PublishThis API Token/Key. This is unique per domain, and can be obtained by a PublishThis administrator when he/she first signs into an account on PublishThis.',
  );
  $vocabularies = publish_this_get_vocabularies();
  $form['general']['publish_this_taxonomy'] = array(
    '#type' => 'select',
    '#title' => t('Taxonomy that contains your categories'),
    '#description' => 'Select the taxonomy/vocabulary that contains the categories to which you want to map imported posts.',
    '#required' => TRUE,
    '#default_value' => variable_get('publish_this_taxonomy'),
    '#options' => $vocabularies,
  );

  return system_settings_form($form);
} /* end function publish_this_globalSettings_form */




//********************* Feeds Management Form *****************************************//

/**
 * Page callback: PublishThis individual feed setup form
 * @see publish_this_feeds_menu()
 */
function publish_this_addFeed_form($form, &$form_state) {
  global $feedLabel_description, $feedID_description, $feedCat_description, $feedFreq_description;
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('PublishThis Feed settings'),
  );
  $form['general']['publish_this_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#description' => $feedLabel_description,
  );
  $form['general']['publish_this_feed_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Feed ID'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#description' => $feedID_description,
  );
  $categories = publish_this_get_categories();
  $form['general']['publish_this_category'] = array(
    '#type' => 'select',
    '#title' => t('Category'),
    '#description' => $feedCat_description,
    '#options' => $categories,
    '#required' => TRUE,
  );
  $form['general']['publish_this_content_curated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Curated Content'),
    '#description' => 'Check to enable PublishThis curated content import for this feed.',
    '#return_value' => TRUE,
  );
  $form['general']['publish_this_content_automated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automated Content'),
    '#description' => 'Check to enable PublishThis automated content import for this feed.',
    '#return_value' => TRUE,
  );
  $form['general']['publish_this_content_custom'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automated Tweets'),
    '#description' => 'Check to enable PublishThis automated tweets import for this feed.',
    '#return_value' => TRUE,
  );
  $form['general']['publish_this_frequency'] = array(
    '#type' => 'textfield',
    '#title' => t('Update frequency (in hrs)'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#description' => $feedFreq_description,
  );
  $form['general']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Feed'),
  );
  return $form;
} /* end function publish_this_addFeed_form */


/**
 * Implements hook_form_validate().
 */
function publish_this_addFeed_form_validate($form, &$form_state) {
} /* end function publish_this_addFeed_form_validate */


/**
 * Implements hook_form_submit().
 */
function publish_this_addFeed_form_submit($form, &$form_state) {
  $name = $form_state['values']['publish_this_name'];
  $feedID = $form_state['values']['publish_this_feed_id'];
  $cat = $form_state['values']['publish_this_category'];
  $custom = $form_state['values']['publish_this_content_custom'];
  $curated = $form_state['values']['publish_this_content_curated'];
  $automated = $form_state['values']['publish_this_content_automated'];
  $freq = $form_state['values']['publish_this_frequency'];
  $insertionFlag = publish_this_add_feed($name,$feedID,$cat,$custom,$curated,$automated,$freq);
  return $insertionFlag;
} /* end function publish_this_addFeed_form_submit */





/**
 * Page callback: PublishThis individual feed edit form
 * @see publish_this_feeds_menu()
 */
function publish_this_editFeed_form($form, &$form_state) {
  global $feedLabel_description, $feedID_description, $feedCat_description, $feedFreq_description;
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('PublishThis Feed settings'),
  );
  $form['general']['publish_this_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#default_value' => isset($_POST['feedLabel']) ? $_POST['feedLabel'] : '',
    '#description' => $feedLabel_description,
  );
  $form['general']['publish_this_feed_id'] = array(
    '#type' => 'hidden',
    '#title' => t('Feed ID'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#default_value' => isset($_POST['feedID']) ? $_POST['feedID'] : '',
    '#description' => $feedID_description,
  );
  $categories = publish_this_get_categories();
  $form['general']['publish_this_category'] = array(
    '#type' => 'select',
    '#title' => t('Category'),
    '#description' => $feedCat_description,
    '#options' => $categories,
    '#default_value' => isset($_POST['feedCat']) ? $_POST['feedCat'] : '',
    '#required' => TRUE,
  );
  $form['general']['publish_this_content_curated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Curated Content'),
    '#description' => 'Check to enable PublishThis curated content import for this feed.',
    '#default_value' => isset($_POST['feedCurated']) ? $_POST['feedCurated'] : '',
  );
  $form['general']['publish_this_content_automated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automated Content'),
    '#description' => 'Check to enable PublishThis automated content import for this feed.',
    '#default_value' => isset($_POST['feedAutomated']) ? $_POST['feedAutomated'] : '',
  );
  $form['general']['publish_this_content_custom'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automated Tweets'),
    '#description' => 'Check to enable PublishThis automated tweets import for this feed.',
    '#default_value' => isset($_POST['feedCustom']) ? $_POST['feedCustom'] : '',
  );
  $form['general']['publish_this_frequency'] = array(
    '#type' => 'textfield',
    '#title' => t('Update frequency (in hrs)'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#default_value' => isset($_POST['feedFreq']) ? $_POST['feedFreq'] : '',
    '#description' => $feedFreq_description,
  );
  $form['general']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Updated Information for this Feed'),
  );
  return $form;
} /* end function publish_this_editFeed_form */


/**
 * Implements hook_form_validate().
 */
function publish_this_editFeed_form_validate($form, &$form_state) {
} /* end function publish_this_editFeed_form_validate */


/**
 * Implements hook_form_submit().
 */
function publish_this_editFeed_form_submit($form, &$form_state) {
  $name = $form_state['values']['publish_this_name'];
  $feedID = $form_state['values']['publish_this_feed_id'];
  $cat = $form_state['values']['publish_this_category'];
  $custom = $form_state['values']['publish_this_content_custom'];
  $curated = $form_state['values']['publish_this_content_curated'];
  $automated = $form_state['values']['publish_this_content_automated'];
  $freq = $form_state['values']['publish_this_frequency'];
  $updateFlag = publish_this_update_feed($name,$feedID,$cat,$custom,$curated,$automated,$freq);
  return $updateFlag;
} /* end function publish_this_editFeed_form_submit */



//********************* Feed Record Deletion Form *******************************************//

/**
 * Page callback: PublishThis individual feed setup form
 * @see publish_this_feeds_menu()
 */
function publish_this_deleteFeed_form($form, &$form_state) {
  global $feedLabel_description, $feedID_description, $feedCat_description, $feedFreq_description;

  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('Confirm Deletion of PublishThis Feed'),
    '#description' => 'Please confirm you really want to delete the feed identified below. Once deleted in Drupal, you will have to add it again to continue importing articles from that feed. Note, this does not impact any existing content that was imported from this feed; all that content will remain published on the site.'
  );
  $form['general']['publish_this_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#default_value' => isset($_POST['feedLabel']) ? $_POST['feedLabel'] : '',
    '#description' => $feedLabel_description,
  );
  $form['general']['publish_this_feed_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Feed ID'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#default_value' => isset($_POST['feedID']) ? $_POST['feedID'] : '',
    '#description' => $feedID_description,
  );
  $form['general']['publish_this_category'] = array(
    '#type' => 'textfield',
    '#title' => t('Category'),
    '#description' => $feedCat_description,
    '#default_value' => isset($_POST['feedCat']) ? $_POST['feedCat'] : '',
    '#required' => TRUE,
  );
  $form['general']['publish_this_content_curated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Curated Content'),
    '#description' => 'Check to enable PublishThis curated content import for this feed.',
    '#default_value' => isset($_POST['feedCurated']) ? $_POST['feedCurated'] : '',
  );
  $form['general']['publish_this_content_automated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automated Content'),
    '#description' => 'Check to enable PublishThis automated content import for this feed.',
    '#default_value' => isset($_POST['feedAutomated']) ? $_POST['feedAutomated'] : '',
  );
  $form['general']['publish_this_content_custom'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automated Tweets'),
    '#description' => 'Check to enable PublishThis automated tweets import for this feed.',
    '#default_value' => isset($_POST['feedCustom']) ? $_POST['feedCustom'] : '',
  );
  $form['general']['publish_this_frequency'] = array(
    '#type' => 'textfield',
    '#title' => t('Update frequency (in hrs)'),
    '#size' => '60',
    '#maxlength' => '128',
    '#required' => TRUE,
    '#default_value' => isset($_POST['feedFreq']) ? $_POST['feedFreq'] : '',
    '#description' => $feedFreq_description,
  );
  $form['general']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm & Delete Feed'),
  );
  return $form;
} /* end function publish_this_deleteFeed_form */

/**
 * Implements hook_form_validate().
 */
function publish_this_deleteFeed_form_validate($form, &$form_state) {
} /* end function publish_this_deleteFeed_form_validate */


/**
 * Implements hook_form_submit().
 */
function publish_this_deleteFeed_form_submit($form, &$form_state) {
  $feedID = $form_state['values']['publish_this_feed_id'];
  $deletionFlag = publish_this_delete_feed($feedID);
  return $deletionFlag;
} /* end function publish_this_deleteFeed_form_submit */





/**
 * Implements hook_form_alter().
 */
function publish_this_form_alter(&$form, &$form_state, $form_id) {
//  watchdog('publish_this', t('hook form alter called by form with id: %formID'), $variables = array('%formID' => $form_id), $severity = WATCHDOG_INFO, $link = NULL);
  switch($form_id) {
    case 'publish_this_deleteFeed_form':
      $form['#submit'][] = 'publish_this_editFeed_form_submit_handler';
      break;
    case 'publish_this_addFeed_form':
      $form['#submit'][] = 'publish_this_editFeed_form_submit_handler';
      break;
    case 'publish_this_editFeed_form':
      $form['#submit'][] = 'publish_this_editFeed_form_submit_handler';
      break;

    default:
      break;
 }
}

/**
 * Custom form_submit_handler().
 */
function publish_this_editFeed_form_submit_handler(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/structure/publish_this_feeds/manage_edit_page';
}

//********************* Feeds Management Display *******************************************//

/*
*  Implements hook_page, used for page callback
*/
function publish_this_page($case) {
  $output = "";
  switch ($case) {
    case 1:
      /* internal page to render all the feeds in the database */
      $output = publish_this_list_feeds();
      break;
    case 2:
      /* internal page to render custom help documentation for curating/managing content on PublishThis */
      $output = '<h1>Curate and Manage PublishThis Content</h1>'
              . '<p>custom help documentation for curating/managing content on PublishThis</p>'
              . '<p>You can manage and curate content within PublishThis using the iframe embedded page below or visit the <a href="https://manager.publishthis.com" target="_blank">PublishThis site in a separate window</a>.</p>'
              . '<iframe class="publishThisEmbed" src="https://manager.publishthis.com"></iframe>'
              ;
      break;
    case 3:
      /* manual-sync page */
      $output = publish_this_import(false);
      break;
    case 4:
      /* internal cron page */
      $output = publish_this_import();
      break;
    default:
      break;
  }
  return $output;
} /* end function publish_this_page */


/**
 * Implements hook_block_info().
 */
function publish_this_block_info() {
  $blocks['publish_this_feeds'] = array(
    // The name that will appear in the block list.
    'info' => t('PublishThis Feed Management'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
} /* end function publish_this_block_info */




/*---
function publish_this_block_view($delta = '') {
  switch ($delta) {
    case 'publish_this_feeds':
      $block['subject'] = t('PublishThis Feed Management Block');
      $formattedResults = publish_this_theme() ;
    }
}
--*/
/**
* @function Implementation of hook_theme()
*/
/*--
function publish_this_theme() {
  return array(
    'publish_this_feeds' => array(
      'arguments' => array('type'=>NULL),
    ),
  );
}
--*/



/**
*   @function: publish_this_import
*     purpose:  Cron importer for PublishThis feeds.
*
*/
function publish_this_import($scheduled = true) {
  $apiKey = publish_this_get_settings('publish_this_api_key');
  $prefix = publish_this_get_settings('publish_this_prefix');
  $suffix = publish_this_get_settings('publish_this_suffix');
  $prefix_curated = publish_this_get_settings('publish_this_prefix_curated');
  $suffix_curated = publish_this_get_settings('publish_this_suffix_curated');
  $prefix_automated = publish_this_get_settings('publish_this_prefix_automated');
  $suffix_automated = publish_this_get_settings('publish_this_suffix_automated');

  $currentHour = date('H');

  if (user_access('access content')) {
    $results = publish_this_get_feeds();
    $feedArray = array();
    $parentCount = 0;

    if(!$scheduled) {
        watchdog('publish_this', t('PublishThis manual sync/import initiated.'), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    } else {
        watchdog('publish_this', t('PublishThis cron import initiated at %hour-hundred hours.',array('%hour'=>$currentHour)), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    }


    foreach ($results as $result) {
        $name = $result->publish_this_name;
        $feedID = $result->publish_this_feed_id;

        $tid = $result->publish_this_category;
        $term = taxonomy_term_load($tid);
        $category = $term->name;

        $customContent = $result->bool_content_custom;
        $curatedContent = $result->bool_content_curated;
        $automatedContent = $result->bool_content_automated;

        $freq = $result->sync_frequency;

        /* check to see if this is manual sync or a cron job (for cron jobs, only import if modulus is zero) */
        if( !$scheduled || ( ($scheduled) && ( ($currentHour % $freq) == 0) ) ) {

          $JSONurl = "";
          if($customContent) {
            /* http://webapi.publishthis.com/rest/content/automated/tweets/feed/{feedId}?token={your api token} */
            $JSONurl = $prefix . $feedID . $suffix . $apiKey;
            $itemCount = publish_this_importJSONitems($JSONurl, $tid);
            $feed = array( "name" => $name, "categoryID" => $tid, "category" => $category, "feedID" => $feedID, "syncFreq" => $freq, "url" => $JSONurl, "items" => $itemCount );
            array_push($feedArray,$feed);
          }
          if($curatedContent) {
            /* http://webapi.publishthis.com/rest/content/curated/feed/{feedId}?token={your api token} */
            $JSONurl = $prefix_curated . $feedID . $suffix_curated . $apiKey;
            $itemCount = publish_this_importJSONitems($JSONurl, $tid);
            $feed = array( "name" => $name, "categoryID" => $tid, "category" => $category, "feedID" => $feedID, "syncFreq" => $freq, "url" => $JSONurl, "items" => $itemCount );
            array_push($feedArray,$feed);
          }
          if($automatedContent) {
            /* http://webapi.publishthis.com/rest/content/automated/feed/{feedId}?token={your api token} */
            $JSONurl = $prefix_automated . $feedID . $suffix_automated . $apiKey;
            $itemCount = publish_this_importJSONitems($JSONurl, $tid);
            $feed = array( "name" => $name, "categoryID" => $tid, "category" => $category, "feedID" => $feedID, "syncFreq" => $freq, "url" => $JSONurl, "items" => $itemCount );
            array_push($feedArray,$feed);
          }

        } /* end scheduled cron/frequency check */

    $parentCount++;
    } /* end foreach */
  }
  if( !$scheduled ) {
    $output = '<h1>Result Summary for Manual Sync of PublishThis JSON feeds</h1>';
    $output .= '<p>PublishThis parentFeeds found: ' . $parentCount . '</p>';
    $output .= '<p>Total individual feeds flagged for import as of ' . $currentHour . '-hundred hrs: ' . count($feedArray) . '</p>';
    $output .= '<table>';
    $output .= "<tr>
      <th>Feed Name</th>
      <th>Category [Term ID]</th>
      <th>Feed Sync</th>
      <th>Feed ID</th>
      <th>Feed JSON URL</th>
      <th>Nodes Imported</th>
      </tr>";

    foreach($feedArray as $feed) {
      $output .= '<tr>
        <td>' . $feed["name"] . '</td>
        <td>' . $feed["category"] . ' [' . $feed["categoryID"] . ']</td>
        <td>' . $feed["syncFreq"] . '</td>
        <td>' . $feed["feedID"] . '</td>
        <td><a href="' . $feed["url"] . '" target="_blank">' . $feed["url"] . '</a></td>
        <td>' . $feed["items"] . '</td>
        </tr>';
    }
    $output .= '</table>';
    watchdog('publish_this', t('PublishThis manual sync/import completed; processed %count feeds.',array('%count'=>count($feedArray))), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    return $output;
  } else {
    watchdog('publish_this', t('PublishThis cron import completed; processed %count feeds.',array('%count'=>count($feedArray))), $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);
    return;
  }
} /* end function publish_this_import */




/**
 * Custom Function publish_this_importJSONitems()
 * @return: A result set of the feeds
 */
function publish_this_importJSONitems($JSONurl, $tid) {
  $tid = utf8_encode($tid);
  $filepath = $JSONurl;
  $jsonString = file_get_contents($filepath);
  $jsonString = utf8_decode($jsonString);
  $jsonArray = json_decode($jsonString, true);

  switch (json_last_error()) {
      case JSON_ERROR_NONE:
          break;
      case JSON_ERROR_DEPTH:
          echo ' - Maximum stack depth exceeded';
          break;
      case JSON_ERROR_STATE_MISMATCH:
          echo ' - Underflow or the modes mismatch';
          break;
      case JSON_ERROR_CTRL_CHAR:
          echo ' - Unexpected control character found';
          break;
      case JSON_ERROR_SYNTAX:
          echo ' - Syntax error, malformed JSON';
          break;
      case JSON_ERROR_UTF8:
          echo ' - Malformed UTF-8 characters, possibly incorrectly encoded';
          break;
      default:
          echo ' - Unknown error';
          break;
  }

  $jsonArray = $jsonArray['resp']['data']['resultList'];
  /*debug*/ //var_dump($jsonArray);

  $itemCount = count($jsonArray);
  $nodeCount = 0;

  for ($i = 0; $i < $itemCount; $i++)
  {
    $record = $jsonArray[$i];
    if( array_key_exists("contentType", $record) ) {

      //Begin Tweet Content Map
      if( $record["contentType"] == 'tweet' ) {

        $nodeTitle = $record["statusId"];
        $nodePublishThisID = $record['docId'];
        $nodeDate = strtotime($record["publishDate"]);
        $nodeAuthorName = $record["userScreenName"];
        $nodeAuthor = publish_this_uidLookup($nodeAuthorName);
        $nodeBody = $record["statusText"];

        $node = new stdClass();
        $node->title = $nodeTitle;
        $node->type = 'automatic_tweets';
        node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
        $node->language = 'en';
        $node->uid = $nodeAuthor;
        $node->field_twitter_handle[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeAuthorName)
        );

        $node->status = 1; //(1 or 0): published or not
        if($i == 0) { $node->promote = 0; } //(1 or 0): promoted to front page
        $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write

        // Term reference (taxonomy) field
        $node->field_category['und'][0] = array('tid' => $tid);

        $node->created = $nodeDate;

        $field_langcode = field_language('node', $node, 'body');
            $node->body[$field_langcode][0]['value']   = $nodeBody;
            $node->body[$field_langcode][0]['summary'] = text_summary($nodeBody);
            $node->body[$field_langcode][0]['format']  = filter_default_format();

        //$node->field_ptid = $nodePublishThisID;
        $node = node_submit($node); // Prepare node for saving
        node_save($node);

        $nodeCount++;
      } // End Tweet Content Map

      //Begin Automatic Content Map
      if( $record["contentType"] != 'tweet' && !array_key_exists("annotations", $record) && array_key_exists("summary", $record) && array_key_exists("publisher", $record) && array_key_exists("url", $record)) {

        $nodeTitle = $record["title"];
        $nodePublishThisID = $record['docId'];
        $nodeDate = strtotime($record["publishDate"]);
        $nodeAuthorName = $record["publisher"];
        $nodeAuthor = publish_this_uidLookup($nodeAuthorName);
        $nodeBody = $record["summary"];
        $nodeLink = $record["url"];

        $node = new stdClass();
        $node->title = $nodeTitle;
        $node->type = 'automatic_content';
        node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
        $node->language = 'en';
        $node->uid = $nodeAuthor;
        $node->field_story_link[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeLink)
        );

        $node->status = 1; //(1 or 0): published or not
        if($i == 0) { $node->promote = 0; } //(1 or 0): promoted to front page
        $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write

        // Term reference (taxonomy) field
        $node->field_category['und'][0] = array('tid' => $tid);

        $node->created = $nodeDate;

        $field_langcode = field_language('node', $node, 'body');
            $node->body[$field_langcode][0]['value']   = $nodeBody;
            $node->body[$field_langcode][0]['summary'] = text_summary($nodeBody);
            $node->body[$field_langcode][0]['format']  = filter_default_format();

        //$node->field_ptid = $nodePublishThisID;
        $node = node_submit($node); // Prepare node for saving
        node_save($node);

        $nodeCount++;
      } //End Automatic Content Map

      //Begin Annotated Article Content Map
      if( $record["contentType"] == 'article' && array_key_exists("annotations", $record)) {

        $nodeTitle = $record["title"];
        $nodePublishThisID = $record['docId'];
        $nodeDate = strtotime($record["publishDate"]);
        if (array_key_exists("publisher", $record)) {
          $nodeAuthorName = $record["publisher"];
        } else {
          $nodeAuthorName = "";
        }
        $nodeAuthor = publish_this_uidLookup($nodeAuthorName);
        $nodeAnnotations = $record["annotations"][0];
        $nodeBody = $nodeAnnotations["annotation"];
        if (array_key_exists("summary", $record)){
          $nodeSummary = $record["summary"];
        }

        if (array_key_exists("publisher", $record)) {
          $nodeLink = $record["url"];
        } else {
          $nodeLink = "";
        }
        if (array_key_exists("imageUrl", $record)) {
          $nodeImageUrl = $record["imageUrl"];
        } else {
          $nodeImageUrl = "";
        }
        if (array_key_exists("imageUrlThumbnail", $record)) {
          $nodeImageThumb = $record["imageUrlThumbnail"];
        } else {
          $nodeImageThumb = "";
        }
        if (array_key_exists("photoCredit", $record)) {
          $nodePhotoCred = $record["photoCredit"];
        } else {
          $nodePhotoCred = "";
        }

        $node = new stdClass();
        $node->title = $nodeTitle;
        $node->type = 'annotated_article';
        node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
        $node->language = 'en';
        $node->uid = $nodeAuthor;
        $node->field_story_link[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeLink)
        );
        $node->field_image_url[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeImageUrl)
        );
        $node->field_thumbnail_url[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeImageThumb)
        );
        $node->field_photo_credit[LANGUAGE_NONE] = array(
          0 => array('value' => $nodePhotoCred)
        );

        $node->status = 1; //(1 or 0): published or not
        if($i == 0) { $node->promote = 0; } //(1 or 0): promoted to front page
        $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write

        // Term reference (taxonomy) field
        $node->field_category['und'][0] = array('tid' => $tid);

        $node->created = $nodeDate;

        $field_langcode = field_language('node', $node, 'body');
            $node->body[$field_langcode][0]['value']   = $nodeBody;
            if ($nodeSummary) {
              $node->body[$field_langcode][0]['summary'] = $nodeSummary;
            }
            else {
              $node->body[$field_langcode][0]['summary'] = text_summary($nodeBody);
            }
            $node->body[$field_langcode][0]['format']  = filter_default_format();

        //$node->field_ptid = $nodePublishThisID;
        $node = node_submit($node); // Prepare node for saving
        node_save($node);

        $nodeCount++;
      } // End Annotated Article Content Map

      //Begin Annotated Text Content Map
      if( $record["contentType"] == 'text' && array_key_exists("annotations", $record) ) {

        $nodeTitle = $record["title"];
        $nodePublishThisID = $record['docId'];
        $nodeDate = strtotime($record["publishDate"]);
        $nodeAuthorName = "Editor";
        $nodeAuthor = publish_this_uidLookup($nodeAuthorName);
        $nodeAnnotations = $record["annotations"][0];
        $nodeBody = $nodeAnnotations["annotation"];

        $node = new stdClass();
        $node->title = $nodeTitle;
        $node->type = 'annotated_text';
        node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
        $node->language = 'en';
        $node->uid = $nodeAuthor;

        $node->status = 1; //(1 or 0): published or not
        if($i == 0) { $node->promote = 0; } //(1 or 0): promoted to front page
        $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write

        // Term reference (taxonomy) field
        $node->field_category['und'][0] = array('tid' => $tid);

        $node->created = $nodeDate;

        $field_langcode = field_language('node', $node, 'body');
            $node->body[$field_langcode][0]['value']   = $nodeBody;
            $node->body[$field_langcode][0]['summary'] = text_summary($nodeBody);
            $node->body[$field_langcode][0]['format']  = filter_default_format();

        //$node->field_ptid = $nodePublishThisID;
        $node = node_submit($node); // Prepare node for saving
        node_save($node);

        /* process node begins */
/*
        if($i == 0) { $output .='<ol>'; }
        $output .= '<li><div>
          <b>Title</b>: ' . $nodeTitle . '<br/>
          <b>Date</b>: ' . $nodeDate . '<br/>
          <b>Author</b>: ' . $nodeAuthor . '<br/>
          <b>UID</b>: ' . $nodePublishThisID . '<br/>
          <b>Link</b>: ' . $nodeLink . '<br/>
          <b>Featured Image</b>: ' . $nodeFeaturedImage . '<br/>
          <b>Image Credit</b>: ' . $nodeFeaturedImageCredit . '<br/>
          <b>Body</b>: ' . $nodeBody . '<br/>
          </div></li>';
        if($i == $itemCount) { $output .='</ol><hr/>'; }
*/
        /* process node ends */

        $nodeCount++;
      } //End Annotated Text Content Map

      //Begin Annotated Image Content Map
      if( $record["contentType"] == 'photo' && array_key_exists("annotations", $record)) {

        $nodeTitle = $record["title"];
        $nodePublishThisID = $record['docId'];
        $nodeDate = strtotime($record["publishDate"]);
        if (array_key_exists("publisher", $record)) {
          $nodeAuthorName = $record["publisher"];
        } else {
          $nodeAuthorName = "";
        }
        $nodeAuthor = publish_this_uidLookup($nodeAuthorName);
        $nodeAnnotations = $record["annotations"][0];
        $nodeBody = $nodeAnnotations["annotation"];

        if (array_key_exists("publisher", $record)) {
          $nodeLink = $record["url"];
        } else {
          $nodeLink = "";
        }
        if (array_key_exists("imageUrl", $record)) {
          $nodeImageUrl = $record["imageUrl"];
        } else {
          $nodeImageUrl = "";
        }
        if (array_key_exists("imageUrlThumbnail", $record)) {
          $nodeImageThumb = $record["imageUrlThumbnail"];
        } else {
          $nodeImageThumb = "";
        }
        if (array_key_exists("photoCredit", $record)) {
          $nodePhotoCred = $record["photoCredit"];
        } else {
          $nodePhotoCred = "";
        }

        $node = new stdClass();
        $node->title = $nodeTitle;
        $node->type = 'annotated_image';
        node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
        $node->language = 'en';
        $node->uid = $nodeAuthor;
        $node->field_story_link[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeLink)
        );
        $node->field_image_url[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeImageUrl)
        );
        $node->field_thumbnail_url[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeImageThumb)
        );
        $node->field_photo_credit[LANGUAGE_NONE] = array(
          0 => array('value' => $nodePhotoCred)
        );

        $node->status = 1; //(1 or 0): published or not
        if($i == 0) { $node->promote = 0; } //(1 or 0): promoted to front page
        $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write

        // Term reference (taxonomy) field
        $node->field_category['und'][0] = array('tid' => $tid);

        $node->created = $nodeDate;

        $field_langcode = field_language('node', $node, 'body');
            $node->body[$field_langcode][0]['value']   = $nodeBody;
            $node->body[$field_langcode][0]['summary'] = text_summary($nodeBody);
            $node->body[$field_langcode][0]['format']  = filter_default_format();

        //$node->field_ptid = $nodePublishThisID;
        $node = node_submit($node); // Prepare node for saving
        node_save($node);

        $nodeCount++;
      } // End Annotated Image Content Map
      
      //Begin Annotated Video Content Map
      if( $record["contentType"] == 'video' && array_key_exists("annotations", $record) && array_key_exists("embed", $record)) {

        $nodeTitle = $record["title"];
        $nodePublishThisID = $record['docId'];
        $nodeDate = strtotime($record["publishDate"]);
        if (array_key_exists("publisher", $record)) {
          $nodeAuthorName = $record["publisher"];
        } else {
          $nodeAuthorName = "";
        }
        $nodeAuthor = publish_this_uidLookup($nodeAuthorName);
        $nodeAnnotations = $record["annotations"][0];
        $nodeBody = $nodeAnnotations["annotation"];
        $nodeEmbed = $record["embed"];

        if (array_key_exists("publisher", $record)) {
          $nodeLink = $record["url"];
        } else {
          $nodeLink = "";
        }
        if (array_key_exists("imageUrl", $record)) {
          $nodeImageUrl = $record["imageUrl"];
        } else {
          $nodeImageUrl = "";
        }
        if (array_key_exists("imageUrlThumbnail", $record)) {
          $nodeImageThumb = $record["imageUrlThumbnail"];
        } else {
          $nodeImageThumb = "";
        }
        if (array_key_exists("photoCredit", $record)) {
          $nodePhotoCred = $record["photoCredit"];
        } else {
          $nodePhotoCred = "";
        }

        $node = new stdClass();
        $node->title = $nodeTitle;
        $node->type = 'annotated_video';
        node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
        $node->language = 'en';
        $node->uid = $nodeAuthor;
        $node->field_story_link[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeLink)
        );
        $node->field_image_url[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeImageUrl)
        );
        $node->field_thumbnail_url[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeImageThumb)
        );
        $node->field_photo_credit[LANGUAGE_NONE] = array(
          0 => array('value' => $nodePhotoCred)
        );
        $node->field_video_link[LANGUAGE_NONE] = array(
          0 => array('value' => $nodeEmbed)
        );

        $node->status = 1; //(1 or 0): published or not
        if($i == 0) { $node->promote = 0; } //(1 or 0): promoted to front page
        $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write

        // Term reference (taxonomy) field
        $node->field_category['und'][0] = array('tid' => $tid);

        $node->created = $nodeDate;

        $field_langcode = field_language('node', $node, 'body');
            $node->body[$field_langcode][0]['value']   = $nodeBody;
            $node->body[$field_langcode][0]['summary'] = text_summary($nodeBody);
            $node->body[$field_langcode][0]['format']  = filter_default_format();

        //$node->field_ptid = $nodePublishThisID;
        $node = node_submit($node); // Prepare node for saving
        node_save($node);

        $nodeCount++;
      } // End Annotated Video Content Map
    } /* end if(array_key_exists) */
  } /* end for loop */

  //echo $output;

  $summary = $nodeCount . " pieces of content imported from feed: <a href='" . $filepath . "' target='_blank'>" . $filepath . "</a>";
  watchdog('publish_this', $summary, $variables = array(), $severity = WATCHDOG_INFO, $link = NULL);

  return $nodeCount;
} /* end Function publish_this_importJSONitems() */



/**
 * Custom publish_this feeds listing for rendering.
 * @return: A result set of the feeds
 */
function publish_this_list_feeds() {
  $output = "";
  $formattedResults = "<p>Below is a list of all <em>PublishThis</em> feeds that have been setup in Drupal for importing.
    <ul>
      <li>Click on the <strong>edit link</strong> to change the name/description, the category assigned, or enable/disable types of feed imports.</li>
      <li>Click the <strong>delete link</strong> to remove a feed permanently from importing into Drupal. <em><strong>Note</strong>: actual content curation and management should be done on the PublishThis website.</em></li>
      <li>Click <a href = '/admin/structure/publish_this_feeds/add_new_feed'>here to add</a> a new PublishThis feed into Drupal's import queue.</li>
    </ul>
  </p>";
  $formattedResults .= "<table><tr><th>Feed ID</th><th>Name/Description</th><th>Category</th><th>Sync Frequency</th><th>Enabled JSON feeds<br/><span style='text-transform:none;'>Click URL</span><span style='text-transform:lowercase;'> to preview live JSON feed</span></th><th>Last Modified</th>";
  $empty_value = $formattedResults;

  $apiKey = publish_this_get_settings('publish_this_api_key');
  $prefix = publish_this_get_settings('publish_this_prefix');
  $suffix = publish_this_get_settings('publish_this_suffix');

  $prefix_curated = publish_this_get_settings('publish_this_prefix_curated');
  $suffix_curated = publish_this_get_settings('publish_this_suffix_curated');

  $prefix_automated = publish_this_get_settings('publish_this_prefix_automated');
  $suffix_automated = publish_this_get_settings('publish_this_suffix_automated');

  if (user_access('access content')) {
    $results = publish_this_get_feeds();
    $i = 0;
    foreach ($results as $result) {
      $name = $result->publish_this_name;
      $feedID = $result->publish_this_feed_id;
      $tid = $result->publish_this_category;
      $term = taxonomy_term_load($tid);
      $category = $term->name;
      $tweetContent = $result->bool_content_custom;
      $curatedContent = $result->bool_content_curated;
      $automatedContent = $result->bool_content_automated;
      $customContent = false;
      $freq = $result->sync_frequency;
      $lastModified = $result->last_modified;

      $formattedResults .= '<tr class="feed-wrapper">';
      $formattedResults .= '<td>' . $feedID . '<br/>
      <form method="post" action="edit_feed" class="publishThisFormLink">
      <input type="hidden" name="feedLabel" value="' . $name . '" />
      <input type="hidden" name="feedID" value="' . $feedID . '" />
      <input type="hidden" name="feedCat" value="' . $tid . '" />
      <input type="hidden" name="feedCustom" value="' . $tweetContent . '" />
      <input type="hidden" name="feedCurated" value="' . $curatedContent . '" />
      <input type="hidden" name="feedAutomated" value="' . $automatedContent . '" />
      <input type="hidden" name="feedFreq" value="' . $freq . '" />
      <input type="submit" value="Edit" />
      </form><br/>
      <form method="post" action="delete_feed" class="publishThisFormLink">
      <input type="hidden" name="feedLabel" value="' . $name . '" />
      <input type="hidden" name="feedID" value="' . $feedID . '" />
      <input type="hidden" name="feedCat" value="' . $tid . '" />
      <input type="hidden" name="feedCustom" value="' . $tweetContent . '" />
      <input type="hidden" name="feedCurated" value="' . $curatedContent . '" />
      <input type="hidden" name="feedAutomated" value="' . $automatedContent . '" />
      <input type="hidden" name="feedFreq" value="' . $freq . '" />
      <input type="submit" value="Delete" />
      </form>
      </td>';
         //  publish_this_delete_feed(1);
      $formattedResults .= '<td>' . $name . '</td>';
      $formattedResults .= '<td>' . $category . '</td>';
      $formattedResults .= '<td>' . $freq . ' hours</td>';
      $formattedResults .= '<td><ul>';

      if($curatedContent) {
        /* http://webapi.publishthis.com/rest/content/curated/feed/{feedId}?token={your api token} */
        $JSONurl = $prefix_curated . $feedID . $suffix_curated . $apiKey;
        $formattedResults .= '<li>Curated Content: <a href="' . $JSONurl . '" target="_blank">' . $JSONurl . '</a></li>';
      }
      if($automatedContent) {
        /* http://webapi.publishthis.com/rest/content/automated/feed/{feedId}?token={your api token} */
        $JSONurl = $prefix_automated . $feedID . $suffix_automated . $apiKey;
        $formattedResults .= '<li>Automated Content: <a href="' . $JSONurl . '" target="_blank">' . $JSONurl . '</a></li>';
      }
      if($tweetContent) {
        /* http://webapi.publishthis.com/rest/content/automated/tweets/feed/{feedId}?token={your api token} */
        $JSONurl = $prefix . $feedID . $suffix . $apiKey;
        $formattedResults .= '<li>Automated Tweets: <a href="' . $JSONurl . '" target="_blank">' . $JSONurl . '</a></li>';
      }
      if($customContent) {
        /* http://webapi.publishthis.com/rest/feeds/{feedId}/custom-data/?token={your api token} */
      }
      if( ($tweetContent + $curatedContent + $automatedContent) == 0) {
        $formattedResults .= '<li>No content feed types have been selected for import for this feed.</li>';
      }
      $formattedResults .='</ul></td>';
      $formattedResults .= '<td>' . $lastModified . '</td>';
      $formattedResults .= '</tr>' . "\n";
    }
    $formattedResults .= '</table>';
    $empty_value .= '</table>';
    // No content
    if ($formattedResults == $empty_value) {
      $output = '<div class="publish-feeds-list">
      <h2>No feeds have been setup</h2>
      <div>Visit <form method="post" action="add_new_feed" class="publishThisFormLink">
      <input type="submit" value="Structure->PublishThis->Add Feed" />
      </form> to setup a new JSON feed to import.</div>
      </div>';
    }
    // results found
    else {
      // Pass data through theme function.
      $output = '<div class="publish-feeds-list">' . $formattedResults . '</div>';
    }

  } /*endif user_access*/
  return $output;
} /* end function publish_this_list_Feeds */




//********************* Publish This Custom DB functions *******************************************//


/**
 * Custom publish_this user id lookup based on author name in JSON.
 * @return: the UID
 */
function publish_this_uidLookup($userName) {

  return 1;
}


/**
 * Custom publish_this taxonomy SELECT from taxonomy_vocabulary table.
 * @return: A result set of the taxonomy vocabularies
 */
function publish_this_get_vocabularies(){
    $vocabulary = taxonomy_get_vocabularies();
    $vocab_array = array();
    foreach ($vocabulary as $item) {
      $key = $item->vid;
      $value = $item->name;
      $vocab_array[$key] = $value;
    }
    return $vocab_array;
} /* end function publish_this_get_vocabularies */

/**
 * Custom publish_this category SELECT from taxonomy_term_data table.
 * @return: A result set of the categories
 */
function publish_this_get_categories(){
  $vid = variable_get('publish_this_taxonomy');
  $vocabulary = taxonomy_get_tree($vid, $parent = 0, $max_depth = 1);
  $vocab_array = array();
  foreach ($vocabulary as $item) {
    $key = $item->tid;
    $value = $item->name;
    $vocab_array[$key] = $value;
  }
  return $vocab_array;
} /* end function publish_this_get_categories */


/**
 * Custom publish_this feeds SELECT from publish_this table.
 * @return: A result set of the feeds
 */
function publish_this_get_feeds($feedID = ""){
  //Use Database API to retrieve current PublishThis feeds.
  if($feedID == "") {
    $query = db_select('publish_this','p')
     ->fields('p',array('publish_this_feed_id','publish_this_name','publish_this_category','bool_content_custom','bool_content_curated','bool_content_automated','sync_frequency','last_modified'))
     ->orderBy('publish_this_name', 'ASC')
     ->execute();
  } else {
    $query = db_select('publish_this','p')
     ->fields('p',array('publish_this_feed_id','publish_this_name','publish_this_category','bool_content_custom','bool_content_curated','bool_content_automated','sync_frequency','last_modified'))
     ->condition('publish_this_feed_id', $feedID)
     ->orderBy('publish_this_name', 'ASC')
     ->execute();
  }
  return $query;
} /* end function publish_this_get_feeds */


/**
 * Custom publish_this global settings SELECT from variables table.
 * @return: A result set of the settings
 */
function publish_this_get_settings($variableName){
  //Use Drupal 7 variable_get to retrieve current global PublishThis settings.
  $query = variable_get( $variableName );
  return $query;
} /* end function publish_this_get_settings */


/**
 * Custom publish_this record deletion SELECT/WHERE & DELETE from publish_this table.
 * @return: confirmation/boolean of deletion
 */
function publish_this_delete_feed($feedID) {
  try {
    $query = db_delete('publish_this')
    ->condition('publish_this_feed_id', $feedID)
    ->execute();
    return $query;
  }
  catch (PDOException $e) {
    drupal_set_message(t('Error: A feed with that ID could not be found for deletion. [ %message ]', array('%message' => $e->getMessage())), 'error');
  }
} /* end function publish_this_delete_feed */


/**
 * Custom publish_this record update SELECT/WHERE & UPDATE publish_this table.
 * @return: confirmation/boolean of update
 */
function publish_this_update_feed($name,$feedID,$cat,$custom,$curated,$automated,$freq) {
  try {
    $query = db_update('publish_this')
    ->fields(array(
      'publish_this_name' => $name,
      'publish_this_category' => $cat,
      'bool_content_custom' => $custom,
      'bool_content_curated' => $curated,
      'bool_content_automated' => $automated,
      'sync_frequency' => $freq,
      'last_modified' => format_date(time(), 'custom', 'Y-m-d H:i:s'),
      ))
    ->condition('publish_this_feed_id', $feedID)
    ->execute();
    return $query;
  }
  catch (PDOException $e) {
    drupal_set_message(t('Error: A feed with that ID could not be found for updating. [ %message ]', array('%message' => $e->getMessage())), 'error');
  }
} /* end function publish_this_delete_feed */


/**
 * Custom publish_this record INSERT to publish_this table.
 * @return: confirmation/boolean of insertion
 */
function publish_this_add_feed($name,$feedID,$cat,$custom,$curated,$automated,$freq) {
  try {
    $query = db_insert('publish_this')
    ->fields(array(
      'publish_this_name' => $name,
      'publish_this_feed_id' => $feedID,
      'publish_this_category' => $cat,
      'bool_content_custom' => $custom,
      'bool_content_curated' => $curated,
      'bool_content_automated' => $automated,
      'sync_frequency' => $freq,
      'last_modified' => format_date(time(), 'custom', 'Y-m-d H:i:s'),
    ))
    ->execute();
    return $query;
  }
  catch (PDOException $e) {
    drupal_set_message( t('Feed ID of @feed already exists.  Please double check your feed ID from PublishThis, and if necessary, edit or remove the existing feed below.', array('@feed' => $feedID)), 'error');
  }
} /* end function publish_this_add_feed */